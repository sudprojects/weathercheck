{"version":3,"sources":["Components/Results/Results.js","Components/Form/Form.js","App.js","serviceWorker.js","index.js"],"names":["Results","_ref","city","temperature","windSpeed","error","react_default","a","createElement","className","Form","onButtonSubmit","onSubmit","type","name","placeholder","particleConfig","particles","number","value","size","interactivity","events","onhover","enable","mode","App","state","undefined","_callee","e","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","fetch","concat","sent","json","console","log","_this","setState","main","temp","wind","speed","stop","this","particles_default","params","Components_Form_Form","Components_Results_Results","parseInt","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oWAkBeA,qBAfC,SAAAC,GAA6C,IAA1CC,EAA0CD,EAA1CC,KAAMC,EAAoCF,EAApCE,YAAaC,EAAuBH,EAAvBG,UAAWC,EAAYJ,EAAZI,MAEjD,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAY,8CAEhBP,GAAQI,EAAAC,EAAAC,cAAA,KAAGC,UAAY,mCAAf,SAAyDP,GACjEA,GAAQI,EAAAC,EAAAC,cAAA,KAAGC,UAAY,kCAAf,gBAA+DN,GACvED,GAAQI,EAAAC,EAAAC,cAAA,KAAGC,UAAY,gCAAf,cAA2DL,GACnEC,GAASC,EAAAC,EAAAC,cAAA,mBAAWH,MCaRK,SArBF,SAAAT,GAAuB,IAApBU,EAAoBV,EAApBU,eAEhB,OAECL,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,KAAGC,UAAY,MACd,iDAEDH,EAAAC,EAAAC,cAAA,OAAKC,UAAY,UAEjBH,EAAAC,EAAAC,cAAA,QAAMC,UAAY,+BAA+BG,SAAUD,GAC1DL,EAAAC,EAAAC,cAAA,SAAOC,UAAY,qBAAqBI,KAAK,OAAOC,KAAK,OAAOC,YAAY,YAC5ET,EAAAC,EAAAC,cAAA,UAAQC,UAAY,uDAApB,oBCPIO,EAAiB,CACjBC,UAAa,CACTC,OAAU,CACNC,MAAS,IAEbC,KAAQ,CACJD,MAAS,IAGjBE,cAAiB,CACbC,OAAU,CACNC,QAAW,CACPC,QAAU,EACVC,KAAQ,cAqEXC,6MA3DbC,MAAQ,CACNzB,UAAM0B,EACNzB,iBAAayB,EACbxB,eAAWwB,EACXvB,WAAOuB,KASTjB,qDAAiB,SAAAkB,EAAOC,GAAP,IAAA5B,EAAA6B,EAAAC,EAAA,OAAAC,EAAA1B,EAAA2B,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACfP,EAAEQ,iBACIpC,EAAO4B,EAAES,OAAOC,SAAStC,KAAKiB,MAFrBgB,EAAAE,KAAA,EAGQI,MAAK,qDAAAC,OAAsDxC,EAAtD,4CAHb,cAGT6B,EAHSI,EAAAQ,KAAAR,EAAAE,KAAA,EAIIN,EAASa,OAJb,OAITZ,EAJSG,EAAAQ,KAKfE,QAAQC,IAAId,GAET9B,EACC6C,EAAKC,SAAS,CACd9C,KAAK8B,EAAKlB,KACVX,YAAa6B,EAAKiB,KAAKC,KACvB9C,UAAW4B,EAAKmB,KAAKC,MACrB/C,MAAO,KAIP0C,EAAKC,SAAS,CACd9C,UAAK0B,EACLzB,iBAAayB,EACbxB,eAAWwB,EACXvB,MAAO,iBAIfwC,QAAQC,IAAI,WAAYC,EAAKpB,MAAMzB,MAxBhB,yBAAAiC,EAAAkB,SAAAxB,EAAAyB,uIA8Bb,OACAhD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACfH,EAAAC,EAAAC,cAAC+C,EAAAhD,EAAD,CAAWE,UAAY,YAAY+C,OAAQxC,IAC3CV,EAAAC,EAAAC,cAACiD,EAAD,CAAM9C,eAAkB2C,KAAK3C,iBAC7BL,EAAAC,EAAAC,cAACkD,EAAD,CACAxD,KAAQoD,KAAK3B,MAAMzB,KACnBC,YAAewD,SAASL,KAAK3B,MAAMxB,YAAc,QACjDC,UAAakD,KAAK3B,MAAMvB,UACxBC,MAASiD,KAAK3B,MAAMtB,gBArDRuD,aCjBEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,uECVNC,IAASC,OAAO7D,EAAAC,EAAAC,cAAC4D,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.61b2665f.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Results.css'\r\n\r\nconst Results = ({ city, temperature, windSpeed, error }) => {\r\n\r\nreturn (\r\n\t\t<div className = 'flex flex-column w-34 center bg-light-gray'>\r\n\t\t\r\n\t\t{city && <p className = 'animated bounceInRight ani slow' >City: {city}</p>}\r\n\t\t{city && <p className = 'animated bounceInLeft ani slow' >temperature: {temperature}</p>}\r\n\t\t{city && <p className = 'animated bounceInUp ani slow' >windSpeed: {windSpeed}</p>}\r\n\t\t{error && <p>error: {error}</p>}\r\n\t\t</div>\r\n\t\t\r\n\t);\r\n\r\n}\r\n\r\nexport default Results;","import React from \"react\";\r\nimport './Form.css'\r\n\r\nconst Form = ({ onButtonSubmit }) =>{\r\n\r\nreturn (\r\n\r\n\t<div>\r\n\t<p className = 'f3'>\r\n\t{'Enter a city name to check weather conditions'}\r\n\t</p>\r\n\t<div className = 'center'>\r\n\t\r\n\t<form className = 'form center pa4 br3 shadow-5' onSubmit={onButtonSubmit}>\r\n\t\t<input className = 'f4 pa2 w-70 center' type=\"text\" name=\"city\" placeholder=\"City...\"/>\r\n\t\t<button className = 'w-30 grow f4 link ph3 pv2 dib white bg-light-purple'>Get Weather</button>\r\n\t</form>\r\n\t\r\n\t</div>\r\n\t</div>\r\n\t);\r\n\r\n} \r\n\r\nexport default Form;\r\n\r\n","import React, { Component } from 'react';\nimport Particles from 'react-particles-js';\nimport './App.css';\nimport CitySearchForm from './Components/CitySearchForm/CitySearchForm';\nimport Results from './Components/Results/Results';\nimport Form from './Components/Form/Form';\n\n\nconst particleConfig = {\n      \"particles\": {\n          \"number\": {\n              \"value\": 50\n          },\n          \"size\": {\n              \"value\": 3\n          }\n      },\n      \"interactivity\": {\n          \"events\": {\n              \"onhover\": {\n                  \"enable\": true,\n                  \"mode\": \"repulse\"\n              }\n          }\n      }\n  }\n\n\nconst city = '';\nclass App extends Component {\n\n  state = {\n    city: undefined,\n    temperature: undefined,\n    windSpeed: undefined,\n    error: undefined\n\n  }\n\n  // onInputChange = (event) =>{\n  //   this.setState({city: event.target.value});\n  //   console.log(event.target.value);\n  // }\n\n  onButtonSubmit = async (e) =>{\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n    const api_call = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=1bec84f07e5892cf7f23526e832cdf46`);\n    const data = await api_call.json();\n    console.log(data);\n    //console.log(data.main.temp);\n    if(city){\n        this.setState({\n        city:data.name,\n        temperature: data.main.temp,\n        windSpeed: data.wind.speed,\n        error: ''\n      });\n\n    }else{\n        this.setState({\n        city:undefined,\n        temperature: undefined,\n        windSpeed: undefined,\n        error: 'Enter values'\n      });\n    }\n\nconsole.log('CityName', this.state.city);\n\n  }\n\n  render() {\n\n      return (\n      <div className=\"App\">\n      <Particles className = 'particles' params={particleConfig} />\n      <Form onButtonSubmit = {this.onButtonSubmit} />\n      <Results \n      city = {this.state.city}\n      temperature = {parseInt(this.state.temperature - 273.15)}\n      windSpeed = {this.state.windSpeed}\n      error = {this.state.error}  />\n      </div>\n      );\n    }\n    \n  \n}\n\nexport default App;\n// <Results city = {this.city} /> \n// <CitySearchForm onInputChange = {this.onInputChange} onButtonSubmit = {this.onButtonSubmit} />","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport 'animate.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}